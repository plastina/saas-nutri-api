// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/foods": {
            "get": {
                "description": "Busca alimentos na base TACO (via DynamoDB) com base em um termo de pesquisa.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "alimentos"
                ],
                "summary": "Busca alimentos (APENAS TACO/DynamoDB)",
                "parameters": [
                    {
                        "type": "string",
                        "example": "arroz",
                        "description": "Termo para buscar o alimento",
                        "name": "search",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Lista de alimentos encontrados da TACO\" // \u003c--- REVERTIDO para model.Food",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Food"
                            }
                        }
                    },
                    "400": {
                        "description": "Erro: Parâmetro 'search' é obrigatório",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Erro interno ao buscar dados dos alimentos",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/foods/{foodId}/measures": {
            "get": {
                "description": "Retorna uma lista de medidas caseiras e seus equivalentes em gramas para um ID de alimento específico.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "alimentos"
                ],
                "summary": "Busca medidas caseiras de um alimento",
                "parameters": [
                    {
                        "type": "string",
                        "example": "d5e1c1b0-...",
                        "description": "ID do Alimento (ex: UUID ou código TACO)",
                        "name": "foodId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Lista de medidas caseiras\" // \u003c--- REVERTIDO para client.MeasureItem",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/client.MeasureItem"
                            }
                        }
                    },
                    "400": {
                        "description": "Erro: ID do alimento é obrigatório",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Erro interno ao buscar medidas",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "client.MeasureItem": {
            "type": "object",
            "properties": {
                "display_name": {
                    "type": "string"
                },
                "gram_equivalent": {
                    "type": "number"
                },
                "measure_name": {
                    "type": "string"
                }
            }
        },
        "model.Food": {
            "type": "object",
            "properties": {
                "carbohydrate_g": {
                    "type": "number"
                },
                "energy_kcal": {
                    "type": "number"
                },
                "fat_g": {
                    "type": "number"
                },
                "fiber_g": {
                    "type": "number"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "protein_g": {
                    "type": "number"
                },
                "source": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "API SaaS Nutri",
	Description:      "API para o MVP do SaaS para nutricionistas.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
